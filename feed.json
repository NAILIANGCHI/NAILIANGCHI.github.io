{
    "version": "https://jsonfeed.org/version/1",
    "title": "奈良池博客",
    "subtitle": "记录学习与生活",
    "icon": "https://www.naraci.top/images/favicon.ico",
    "description": "No woman in heart, natural God in code！",
    "home_page_url": "https://www.naraci.top",
    "items": [
        {
            "id": "https://www.naraci.top/post/1.html",
            "url": "https://www.naraci.top/post/1.html",
            "title": "Java单列模式",
            "date_published": "2023-10-18T16:00:00.000Z",
            "content_html": "<h1 id=\"java单列模式介绍\"><a class=\"markdownIt-Anchor\" href=\"#java单列模式介绍\">#</a> Java 单列模式介绍</h1>\n<p>主要解决全局使用的类频繁的创建与销毁<br>\n保证一个类仅有一个实例，并提供一个访问它的全局访问点<br>\n<strong>创建一个 Singleton</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SingleObject</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"comment\">//创建 SingleObject 的一个对象</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">SingleObject</span> <span class=\"variable\">instance</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SingleObject</span>();</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"comment\">//让构造函数为 private，这样该类就不会被实例化</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"title function_\">SingleObject</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"comment\">//获取唯一可用的对象</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingleObject <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">showMessage</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;Hello World!&quot;</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>从 singleton 类获取唯一的对象</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SingletonPatternDemo</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">//不合法的构造函数</span></span><br><span class=\"line\">      <span class=\"comment\">//编译时错误：构造函数 SingleObject() 是不可见的</span></span><br><span class=\"line\">      <span class=\"comment\">//SingleObject object = new SingleObject();</span></span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">//获取唯一可用的对象</span></span><br><span class=\"line\">      <span class=\"type\">SingleObject</span> <span class=\"variable\">object</span> <span class=\"operator\">=</span> SingleObject.getInstance();</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">//显示消息</span></span><br><span class=\"line\">      object.showMessage();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行输出</p>\n<blockquote>\n<p>Hello World!</p>\n</blockquote>\n<h2 id=\"懒汉式-线程不安全-不支持多线程\"><a class=\"markdownIt-Anchor\" href=\"#懒汉式-线程不安全-不支持多线程\">#</a> 懒汉式 线程不安全 （不支持多线程）</h2>\n<p><strong>特点：</strong> 最基本的实现方式，但是不支持多线程，没有加锁 synchronized, 所以严格意义上它并不算单列模式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span> <span class=\"params\">()</span>&#123;&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"literal\">null</span>) &#123;  </span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"懒汉式-线程安全\"><a class=\"markdownIt-Anchor\" href=\"#懒汉式-线程安全\">#</a> 懒汉式 线程安全</h2>\n<p>** 描述：** 这种方式具备很好的 lazy loading，能够在多线程中很好的工作，但是，效率很低，99% 情况下不需要同步。<br>\n优点：第一次调用才初始化，避免内存浪费。<br>\n缺点：必须加锁 synchronized 才能保证单例，但加锁会影响效率。<br>\ngetInstance () 的性能对应用程序不是很关键（该方法使用不太频繁）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span> <span class=\"params\">()</span>&#123;&#125;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> Singleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"literal\">null</span>) &#123;  </span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"饿汉式\"><a class=\"markdownIt-Anchor\" href=\"#饿汉式\">#</a> 饿汉式</h2>\n<p><strong>描述</strong>：这种方式比较常用，但容易产生垃圾对象。<br>\n优点：没有加锁，执行效率会提高。<br>\n缺点：类加载时就初始化，浪费内存。<br>\n它基于 classloader 机制避免了多线程的同步问题，不过，instance 在类装载时就实例化，虽然导致类装载的原因有很多种，在单例模式中大多数都是调用 getInstance 方法， 但是也不能确定有其他的方式（或者其他的静态方法）导致类装载，这时候初始化 instance 显然没有达到 lazy loading 的效果。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">Singleton</span> <span class=\"variable\">instance</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span> <span class=\"params\">()</span>&#123;&#125;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> instance;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"双检锁-双重校验锁-dcl即-double-checked-locking\"><a class=\"markdownIt-Anchor\" href=\"#双检锁-双重校验锁-dcl即-double-checked-locking\">#</a> 双检锁 / 双重校验锁 （### DCL，即 double-checked locking）</h2>\n<p><strong>描述：</strong> 这种方式采用双锁机制，安全且在多线程情况下能保持高性能。<br>\ngetInstance () 的性能对应用程序很关键。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> Singleton singleton;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span> <span class=\"params\">()</span>&#123;&#125;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title function_\">getSingleton</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (singleton == <span class=\"literal\">null</span>) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (Singleton.class) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (singleton == <span class=\"literal\">null</span>) &#123;  </span><br><span class=\"line\">                singleton = <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> singleton;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"枚举\"><a class=\"markdownIt-Anchor\" href=\"#枚举\">#</a> 枚举</h2>\n<p><strong>描述：</strong> 这种实现方式还没有被广泛采用，但这是实现单例模式的最佳方法。它更简洁，自动支持序列化机制，绝对防止多次实例化。<br>\n这种方式是 Effective Java 作者 Josh Bloch 提倡的方式，它不仅能避免多线程同步问题，而且还自动支持序列化机制，防止反序列化重新创建新的对象，绝对防止多次实例化。不过，由于 JDK1.5 之后才加入 enum 特性，用这种方式写不免让人感觉生疏，在实际工作中，也很少用。<br>\n不能通过 reflection attack 来调用私有构造方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">Singleton</span> &#123;  </span><br><span class=\"line\">    INSTANCE;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">whateverMethod</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"登记式静态内部类\"><a class=\"markdownIt-Anchor\" href=\"#登记式静态内部类\">#</a> 登记式 / 静态内部类</h2>\n<p><strong>描述：</strong> 这种方式能达到双检锁方式一样的功效，但实现更简单。对静态域使用延迟初始化，应使用这种方式而不是双检锁方式。这种方式只适用于静态域的情况，双检锁方式可在实例域需要延迟初始化时使用。<br>\n这种方式同样利用了 classloader 机制来保证初始化 instance 时只有一个线程，它跟第 3 种方式不同的是：第 3 种方式只要 Singleton 类被装载了，那么 instance 就会被实例化（没有达到 lazy loading 效果），而这种方式是 Singleton 类被装载了，instance 不一定被初始化。因为 SingletonHolder 类没有被主动使用，只有通过显式调用 getInstance 方法时，才会显式装载 SingletonHolder 类，从而实例化 instance。想象一下，如果实例化 instance 很消耗资源，所以想让它延迟加载，另外一方面，又不希望在 Singleton 类加载时就实例化，因为不能确保 Singleton 类还可能在其他的地方被主动使用从而被加载，那么这个时候实例化 instance 显然是不合适的。这个时候，这种方式相比第 3 种方式就显得很合理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SingletonHolder</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Singleton</span> <span class=\"variable\">INSTANCE</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span> <span class=\"params\">()</span>&#123;&#125;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> SingletonHolder.INSTANCE;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "Java",
                "Java"
            ]
        },
        {
            "id": "https://www.naraci.top/post/47333.html",
            "url": "https://www.naraci.top/post/47333.html",
            "title": "Java开发遇见的陌生含义",
            "date_published": "2023-07-21T05:10:46.000Z",
            "content_html": "<h1 id=\"pom是什么\"><a class=\"markdownIt-Anchor\" href=\"#pom是什么\">#</a> pom 是什么？</h1>\n<pre><code>pom是指`Project object Model`项目对象模型，用于描述项目配置信息。它可以自动化管理项目的依赖，编译，测试，打包等任务。它位于项目根目录。\n</code></pre>\n<h3 id=\"pomxml文件具有以下主要用途\"><a class=\"markdownIt-Anchor\" href=\"#pomxml文件具有以下主要用途\">#</a> pom.xml 文件具有以下主要用途：</h3>\n<ol>\n<li>\n<p>定义项目信息：在 pom.xml 中，你可以定义项目的名称、版本号、描述等基本信息。</p>\n</li>\n<li>\n<p>管理项目依赖：你可以在 pom.xml 中声明项目所依赖的第三方库或其他模块，Maven 将自动下载并管理这些依赖。</p>\n</li>\n<li>\n<p>配置插件：Maven 通过插件来执行各种任务，如编译、测试、打包等。pom.xml 中可以配置这些插件的设置。</p>\n</li>\n<li>\n<p>设置构建规则：你可以在 pom.xml 中定义项目的构建规则，例如编译时需要执行哪些操作，如何打包项目等。</p>\n</li>\n</ol>\n<h3 id=\"对于新手来说以下是一些建议\"><a class=\"markdownIt-Anchor\" href=\"#对于新手来说以下是一些建议\">#</a> 对于新手来说，以下是一些建议：</h3>\n<ol>\n<li>\n<p>了解基本结构：学习 pom.xml 文件的基本结构和标签含义，这对于理解和配置 Maven 项目至关重要。</p>\n</li>\n<li>\n<p>注意依赖管理：合理管理项目的依赖非常重要。确保依赖项的版本与你的项目兼容，并尽量避免使用过多的不必要依赖。</p>\n</li>\n<li>\n<p>阅读文档：Maven 有丰富的文档和社区资源。在遇到问题时，优先查阅相关文档和搜索解决方案，这将帮助你更快地解决问题。</p>\n</li>\n<li>\n<p>使用版本控制：将 pom.xml 纳入版本控制系统（如 Git），确保在团队协作时项目配置的一致性。</p>\n</li>\n<li>\n<p>注意继承和聚合：Maven 支持项目继承和聚合特性。理解这些特性的作用和用法，可以让你更好地组织复杂的项目结构。</p>\n</li>\n<li>\n<p>小步调试：当对项目配置进行重大更改时，建议先进行小步调试，逐步验证每个更改，避免一次性引入多个问题。</p>\n</li>\n<li>\n<p>注意 Maven 生命周期：了解 Maven 的构建生命周期和各个阶段的执行顺序，这有助于理解构建过程和插件执行顺序。</p>\n</li>\n</ol>\n<h3 id=\"常用的标签\"><a class=\"markdownIt-Anchor\" href=\"#常用的标签\">#</a> 常用的标签</h3>\n<ol>\n<li>\n<p><code>&lt;project&gt;</code> ：定义整个项目的根标签，所有其他标签都嵌套在这个标签内。</p>\n</li>\n<li>\n<p><code>&lt;modelVersion&gt;</code> ：指定 POM 模型的版本，通常为 &quot;4.0.0&quot;。</p>\n</li>\n<li>\n<p><code>&lt;groupId&gt;</code> ：定义项目所属的组织或团队的唯一标识符。</p>\n</li>\n<li>\n<p><code>&lt;artifactId&gt;</code> ：定义项目的唯一标识符，通常用于构建生成的文件名。</p>\n</li>\n<li>\n<p><code>&lt;version&gt;</code> ：定义项目的版本号。</p>\n</li>\n<li>\n<p><code>&lt;packaging&gt;</code> ：定义项目的打包类型，如 &quot;jar&quot;、“war”、&quot;pom&quot; 等。</p>\n</li>\n<li>\n<p><code>&lt;name&gt;</code> ：定义项目的名称。</p>\n</li>\n<li>\n<p><code>&lt;description&gt;</code> ：定义项目的描述信息。</p>\n</li>\n<li>\n<p><code>&lt;dependencies&gt;</code> ：用于列出项目所依赖的其他库或模块。</p>\n</li>\n<li>\n<p><code>&lt;dependency&gt;</code> ：定义单个依赖项，包含 <code>&lt;groupId&gt;</code> 、 <code>&lt;artifactId&gt;</code>  和 <code>&lt;version&gt;</code>  等子标签。</p>\n</li>\n<li>\n<p><code>&lt;properties&gt;</code> ：定义项目中使用到的属性，可用于简化版本号、路径等的重复定义。</p>\n</li>\n<li>\n<p><code>&lt;build&gt;</code> ：定义项目的构建配置。</p>\n</li>\n<li>\n<p><code>&lt;plugins&gt;</code> ：用于列出项目中使用的插件配置。</p>\n</li>\n<li>\n<p><code>&lt;plugin&gt;</code> ：定义单个插件，包含 <code>&lt;groupId&gt;</code> 、 <code>&lt;artifactId&gt;</code>  和 <code>&lt;version&gt;</code>  等子标签。</p>\n</li>\n<li>\n<p><code>&lt;repositories&gt;</code> ：用于配置项目的依赖仓库。</p>\n</li>\n<li>\n<p><code>&lt;repository&gt;</code> ：定义单个依赖仓库，包含 URL 等信息。</p>\n</li>\n<li>\n<p><code>&lt;dependencyManagement&gt;</code> ：用于集中管理项目的依赖版本，让子项目继承统一的版本号。</p>\n</li>\n<li>\n<p><code>&lt;parent&gt;</code> ：用于定义当前项目的父项目，继承父项目的配置信息。</p>\n</li>\n</ol>\n",
            "tags": [
                "Java",
                "Java"
            ]
        },
        {
            "id": "https://www.naraci.top/post/9872.html",
            "url": "https://www.naraci.top/post/9872.html",
            "title": "Git指令总结",
            "date_published": "2023-07-19T14:47:02.000Z",
            "content_html": "<h2 id=\"命令\"><a class=\"markdownIt-Anchor\" href=\"#命令\">#</a> 命令</h2>\n<table>\n<thead>\n<tr>\n<th>示意</th>\n<th>git 命令</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>使用 git 对文件初始化</td>\n<td><code>git init</code></td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td>告诉 git ，你要对哪些文件进行存档操作，将对应的文件添加到对应的暂存区</td>\n<td><code>git add &lt;file&gt;</code> , 示例： <code>git add test.txt</code></td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td>添加的暂存区之后让 master 管理员，帮我们做个存档，生成一个存档记录</td>\n<td><code>git commit -m &lt;message&gt;</code>  ，示例  <code>git commit -m </code> 实现了网站登录功能</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td>有多个存档记录的时候，在各个记录存档之间切换</td>\n<td><code>git reset —hard commit_id</code> ,commit_id 是对应的存档记录</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td>git 帮你召唤一个名叫 fixbug 的新档案管理员</td>\n<td><code>git checkout -b &lt;name&gt;</code>  或者 <code>git switch -c &lt;name&gt;</code> ，示例： <code>git checkout -b fixbug</code>  「创建 + 切换分支」</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td>切换到新的分支 fixbug</td>\n<td><code>git checkout &lt;name&gt;</code>  或者 <code>git switch &lt;name&gt;</code> ，示例： <code>git checkout fixbug</code></td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td>切换回 master 分支，然后把 develop 分支合并起来</td>\n<td><code>git checkout master``git merge develop</code></td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td>在 develop 分支开发新功能，发现我的网站上有个 bug，切换到 master 分支，然后在 master 分支新建一个 bugfix 的分支</td>\n<td><code>git checkout master``git checkout -b bugfix</code></td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td>修复完 bug，切换回 master 分支，再把 bugfix 分支合并过来</td>\n<td><code>git checkout master</code></td>\n</tr>\n<tr>\n<td><code>git merge bugfix</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"常用的git命令\"><a class=\"markdownIt-Anchor\" href=\"#常用的git命令\">#</a> 常用的 git 命令</h3>\n<ul>\n<li><code>git clone &lt;git@github.com&gt;:xxxx</code> ，下载仓库</li>\n<li><code>git init</code> ，初始化本地仓库 .git</li>\n<li><code>git status -sb</code> ，显示当前所有文件的状态</li>\n<li><code>git add 文件路径</code> ，用来将变动加到暂存区</li>\n<li><code>git commit -m &quot;信息&quot;</code> ，用来正式提交变动，提交至 .git 仓库</li>\n<li>如果有新的变动，我们只需要依次执行 git add xxx 和 git commit -m ‘xxx’ 两个命令即可。先 add 再 commit，行了，你学会 git 了。</li>\n<li><code>git log</code>  查看变更历史</li>\n<li><code>git pull</code>  取回远程主机某个分支的更新，再与本地的指定分支合并</li>\n<li>查看分支： <code>git branch</code></li>\n<li>创建分支： <code>git branch &lt;name&gt;</code></li>\n<li>切换分支： <code>git checkout &lt;name&gt;</code>  或者 <code>git switch &lt;name&gt;</code></li>\n<li>创建 + 切换分支： <code>git checkout -b &lt;name&gt;</code>  或者 <code>git switch -c &lt;name&gt;</code></li>\n<li>合并某分支到当前分支： <code>git merge &lt;name&gt;</code></li>\n<li>删除分支： <code>git branch -d &lt;name&gt;</code></li>\n</ul>\n<p>– 其余待补充 –</p>\n",
            "tags": [
                "Git",
                "Git"
            ]
        },
        {
            "id": "https://www.naraci.top/post/61264.html",
            "url": "https://www.naraci.top/post/61264.html",
            "title": "PHP面向对象梳理笔记",
            "date_published": "2023-04-13T08:29:14.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>专业课本上写的面向对象实例没有清晰明了的概括出来，代码参杂混乱让人实在是摸不出头脑这时候就该面向浏览器的编程学习了。</p>\n<h2 id=\"对象的三个特性\"><a class=\"markdownIt-Anchor\" href=\"#对象的三个特性\">#</a> 对象的三个特性：</h2>\n<p><strong>摘自：</strong> <code>[什么是PHP面向对象 - php完全自学手册 - php中文网手册]</code> (<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucGhwLmNuL3BocC9waHAtb29wLmh0bWw=\">https://www.php.cn/php/php-oop.html</span>)</p>\n<ul>\n<li>对象的行为：如拿过来，放下等就是行为。</li>\n<li>对象的形态：如颜色，尺寸，外型。</li>\n<li>对象的表示：对象的表示相当于身份证，具体区分在相同的行为于状态下有什么不同。</li>\n</ul>\n<h3 id=\"面向对象的内容\"><a class=\"markdownIt-Anchor\" href=\"#面向对象的内容\">#</a> 面向对象的内容</h3>\n<ul>\n<li>类 ：定义了一件事物的抽象特点。类的定义包含了数据的形式以及对数据的操作。</li>\n<li>对象：是类的实例 （ <code>根据关键字new可以实例化对象</code> ）</li>\n<li>成员变量 ： 定义在类的内部的变量。该变量的值是对外不可见的，但是可以通过成员函数访问，在类被实例化对象后该变量可称为对象的属性、</li>\n<li>成员函数 ： 定义在类的内部，可以用于访问对象的数据。</li>\n<li>继承 ： 继承性是子类自动共享父类数据结构的方法和机制，这是类之间的一种关系。在定义和实现一个类的时候，可以在一个已经存在的类的基础之上类进行，把这个已经存在的类所定义的内容作为自己的内容，并加入若干新的内容、</li>\n<li>父类 ： 一个类被其他类继承，可以将该类称之为父类或者基类，或超类。</li>\n<li>子类 ： 一个继承其他类为子类，也可称之为派生类。</li>\n<li>多态 ： 多态性是指相同的操作或函数，过程可作用多种类型的对象并获得不同的效果。不同的对象，收到同一消息可以产生不同的结果，这种现象称为多态性。</li>\n<li>重载 ： 简单说，就是函数或者方法有同样的名称，但是参数列表不相同的情形，这样的同名不同参数的函数或者方法之间，互相称之为重载函数或者方法。</li>\n<li>抽象性 ： 抽象性是指将具有一致的数据结构（属性）和行为（操作）的对象抽象成类。一个类就是这样一种抽象，它反映了与应用有关的重要性质，而忽略其他一些无关内容。任何类的划分都是主观的，但必须与具体的应用有关。</li>\n<li>封装 ： 封装是指将现实世界中存在的某个客体的属性与行为绑定在一起，并放置在一个逻辑单元内。</li>\n<li>构造函数 ： 主要用来在创建对象时初始化对象， 即为对象成员变量赋初始值，总与 new 运算符一起使用在创建对象的语句中。</li>\n<li>析构函数 ： 析构函数 (destructor) 与构造函数相反，当对象结束其生命周期时（例如对象所在的函数已调用完毕），系统自动执行析构函数。析构函数往往用来做 &quot;清理善后&quot; 的工作（例如在建立对象时用 new 开辟了一片内存空间，应在退出前在析构函数中用 delete 释放）。</li>\n</ul>\n<h3 id=\"语法\"><a class=\"markdownIt-Anchor\" href=\"#语法\">#</a> 语法</h3>\n<h4 id=\"创建定义一个类\"><a class=\"markdownIt-Anchor\" href=\"#创建定义一个类\">#</a> 创建定义一个类</h4>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">car</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">/*成员变量*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> color;</span><br><span class=\"line\"><span class=\"keyword\">var</span> carname;</span><br><span class=\"line\"><span class=\"comment\">/*成员函数*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setColor</span>(<span class=\"params\"><span class=\"variable\">$par</span></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">$this</span>-&gt;color = <span class=\"variable\">$par</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getColor</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"variable language_\">$this</span>-&gt;color;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setCarname</span>(<span class=\"params\"><span class=\"variable\">$par</span></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">$this</span>-&gt;carname = <span class=\"variable\">$par</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCarname</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"variable language_\">$this</span>-&gt;carname;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>$this 是自身的对象</p>\n</blockquote>\n<p>传参和访问对象里</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$car</span> = <span class=\"keyword\">new</span> car;  </span><br><span class=\"line\"><span class=\"variable\">$car</span>-&gt;<span class=\"title function_ invoke__\">setCarname</span>(<span class=\"string\">&quot;bwm&quot;</span>);  </span><br><span class=\"line\"><span class=\"variable\">$car</span>-&gt;<span class=\"title function_ invoke__\">setColor</span>(<span class=\"string\">&quot;red&quot;</span>);  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"variable\">$car</span>-&gt;<span class=\"title function_ invoke__\">getColor</span>();  </span><br><span class=\"line\"><span class=\"variable\">$car</span>-&gt;<span class=\"title function_ invoke__\">getCarname</span>();</span><br></pre></td></tr></table></figure>\n<h4 id=\"构造函数\"><a class=\"markdownIt-Anchor\" href=\"#构造函数\">#</a> 构造函数</h4>\n<p>构造函数 ，是一种特殊的方法。主要用来在创建对象时初始化对象， 即为对象成员变量赋初始值，总与 new 运算符一起使用在创建对象的语句中。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">people</span> </span>&#123;  </span><br><span class=\"line\"><span class=\"comment\">//    成员变量  </span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"variable\">$name</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"variable\">$age</span>;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"variable\">$Name</span>,<span class=\"variable\">$Age</span></span>)  </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;        <span class=\"variable language_\">$this</span>-&gt;name = <span class=\"variable\">$Name</span>;  </span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;age = <span class=\"variable\">$Age</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"><span class=\"comment\">//    成员函数  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setName</span>(<span class=\"params\"><span class=\"variable\">$par</span></span>) </span>&#123;  </span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;name = <span class=\"variable\">$par</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"variable language_\">$this</span>-&gt;name.PHP_EOL;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setAge</span>(<span class=\"params\"><span class=\"variable\">$par</span></span>) </span>&#123;  </span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;age = <span class=\"variable\">$par</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAge</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"variable language_\">$this</span>-&gt;age.PHP_EOL;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"comment\">//实例化对象  </span></span><br><span class=\"line\"><span class=\"variable\">$pep</span> = <span class=\"keyword\">new</span> <span class=\"title function_ invoke__\">people</span>(<span class=\"string\">&quot;zhaoyu&quot;</span>,<span class=\"string\">&quot;21&quot;</span>);  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//调用成员函数  </span></span><br><span class=\"line\"><span class=\"variable\">$pep</span>-&gt;<span class=\"title function_ invoke__\">getName</span>();  </span><br><span class=\"line\"><span class=\"variable\">$pep</span>-&gt;<span class=\"title function_ invoke__\">getAge</span>();</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>可以看出构造函数和上面普通函数不同的是直接就可以在 new 方法里直接传参省去 set 方法</strong></p>\n</blockquote>\n<h4 id=\"析构函数\"><a class=\"markdownIt-Anchor\" href=\"#析构函数\">#</a> 析构函数</h4>\n<p>析构函数 (destructor) 与构造函数相反，当对象结束其生命周期时（例如对象所在的函数已调用完毕），系统自动执行析构函数。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*析构函数语法  </span></span><br><span class=\"line\"><span class=\"comment\">viod_destruct(void);*/</span>  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Xigouhanshu</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)  </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;        <span class=\"keyword\">print</span> <span class=\"string\">&quot;构造函数\\n&quot;</span>;  </span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;name = <span class=\"string\">&quot;Xigouhanshu&quot;</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__destruct</span>(<span class=\"params\"></span>)  </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;        <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Implement __destruct() method.  </span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">&quot;销毁&quot;</span>. <span class=\"variable language_\">$this</span>-&gt;name . <span class=\"string\">&quot;\\n&quot;</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"variable\">$object</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Xigouhanshu</span>();</span><br></pre></td></tr></table></figure>\n<h4 id=\"继承\"><a class=\"markdownIt-Anchor\" href=\"#继承\">#</a> 继承</h4>\n<p>PHP 使用关键字 extends 来继承一个类 (父类)，PHP 不支持多继承，格式如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*代码格式:  </span></span><br><span class=\"line\"><span class=\"comment\">class child extends parent &#123;  </span></span><br><span class=\"line\"><span class=\"comment\">  </span></span><br><span class=\"line\"><span class=\"comment\">&#125;*/</span>  </span><br><span class=\"line\"><span class=\"comment\">//引入父类文件  </span></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"string\">&quot;../类与对象/main.php&quot;</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">child</span> <span class=\"keyword\">extends</span> <span class=\"title\">car</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"variable\">$category</span>;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setCate</span>(<span class=\"params\"><span class=\"variable\">$par</span></span>) </span>&#123;  </span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;category = <span class=\"variable\">$par</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCate</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"variable language_\">$this</span>-&gt;category . PHP_EOL;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"variable\">$test</span> = <span class=\"keyword\">new</span> <span class=\"title function_ invoke__\">child</span>();  </span><br><span class=\"line\"><span class=\"variable\">$test</span>-&gt;<span class=\"title function_ invoke__\">setColor</span>(<span class=\"string\">&quot;yellow&quot;</span>);  </span><br><span class=\"line\"><span class=\"variable\">$test</span>-&gt;<span class=\"title function_ invoke__\">getColor</span>();  </span><br><span class=\"line\"><span class=\"variable\">$test</span>-&gt;<span class=\"title function_ invoke__\">setCate</span>(<span class=\"string\">&quot;pen&quot;</span>);  </span><br><span class=\"line\"><span class=\"variable\">$test</span>-&gt;<span class=\"title function_ invoke__\">getCate</span>();</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>上面父类引用的是上面定义类的父类通过继承父类可以通过子类来调用父类的方法</p>\n</blockquote>\n<h4 id=\"方法重载\"><a class=\"markdownIt-Anchor\" href=\"#方法重载\">#</a> 方法重载</h4>\n<p>如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入父类文件</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"string\">&quot;../类与对象/main.php&quot;</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">childs</span> <span class=\"keyword\">extends</span> <span class=\"title\">car</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getColor</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"variable language_\">$this</span>-&gt;color . PHP_EOL;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">$this</span>-&gt;color;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"variable\">$test</span> = <span class=\"keyword\">new</span> <span class=\"title function_ invoke__\">childs</span>();  </span><br><span class=\"line\"><span class=\"variable\">$test</span>-&gt;<span class=\"title function_ invoke__\">setColor</span>(<span class=\"string\">&quot;black&quot;</span>);  </span><br><span class=\"line\"><span class=\"variable\">$test</span>-&gt;<span class=\"title function_ invoke__\">getColor</span>();</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>上面可以明确看到在子类方法中改写父类方法</p>\n</blockquote>\n<h4 id=\"访问控制\"><a class=\"markdownIt-Anchor\" href=\"#访问控制\">#</a> 访问控制</h4>\n<p>PHP 对属性或方法的访问控制，是通过在前面添加关键字 public（公有），protected（受保护）或 private（私有）来实现的。</p>\n<ul>\n<li>public（公有）：公有的类成员可以在任何地方被访问。</li>\n<li>protected（受保护）：受保护的类成员则可以被其自身以及其子类和父类访问。</li>\n<li>private（私有）：私有的类成员则只能被其定义所在的类访问。<br>\n<strong>属性访问控制</strong><br>\n类属性必须定义为公有，受保护，私有之一。如果用 var 定义，则被视为公有。</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Define MyClass</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$public </span>= <span class=\"string\">&#x27;Public&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$protected </span>= <span class=\"string\">&#x27;Protected&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$private </span>= <span class=\"string\">&#x27;Private&#x27;</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printHello</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"variable language_\">$this</span>-&gt;<span class=\"keyword\">public</span>;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"variable language_\">$this</span>-&gt;<span class=\"keyword\">protected</span>;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"variable language_\">$this</span>-&gt;<span class=\"keyword\">private</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">$obj </span>= <span class=\"keyword\">new</span><span class=\"title function_ invoke__\"> MyClass</span>();</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$obj</span>-&gt;<span class=\"keyword\">public</span>; <span class=\"comment\">// 这行能被正常执行</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$obj</span>-&gt;<span class=\"keyword\">protected</span>; <span class=\"comment\">// 这行会产生一个致命错误</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$obj</span>-&gt;<span class=\"keyword\">private</span>; <span class=\"comment\">// 这行也会产生一个致命错误</span></span><br><span class=\"line\"><span class=\"variable\">$obj</span>-&gt;<span class=\"title function_ invoke__\">printHello</span>(); <span class=\"comment\">// 输出 Public、Protected 和 Private</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Define MyClass2</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass2</span> <span class=\"keyword\">extends</span> <span class=\"title\">MyClass</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 可以对 public 和 protected 进行重定义，但 private 而不能</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$protected </span>= <span class=\"string\">&#x27;Protected2&#x27;</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printHello</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"variable language_\">$this</span>-&gt;<span class=\"keyword\">public</span>;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"variable language_\">$this</span>-&gt;<span class=\"keyword\">protected</span>;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"variable language_\">$this</span>-&gt;<span class=\"keyword\">private</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">$obj2 </span>= <span class=\"keyword\">new</span><span class=\"title function_ invoke__\"> MyClass2</span>();</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$obj2</span>-&gt;<span class=\"keyword\">public</span>; <span class=\"comment\">// 这行能被正常执行</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$obj2</span>-&gt;<span class=\"keyword\">private</span>; <span class=\"comment\">// 未定义 private</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$obj2</span>-&gt;<span class=\"keyword\">protected</span>; <span class=\"comment\">// 这行会产生一个致命错误</span></span><br><span class=\"line\"><span class=\"variable\">$obj2</span>-&gt;<span class=\"title function_ invoke__\">printHello</span>(); <span class=\"comment\">// 输出 Public、Protected2 和 Undefined</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"接口\"><a class=\"markdownIt-Anchor\" href=\"#接口\">#</a> 接口</h4>\n<p>使用接口（interface），可以指定某个类必须实现哪些方法，但不需要定义这些方法的具体内容。</p>\n<p>接口是通过 <strong>interface</strong> 关键字来定义的，就像定义一个标准的类一样，但其中定义所有的方法都是空的。</p>\n<p>接口中定义的所有方法都必须是公有，这是接口的特性。</p>\n<p>要实现一个接口，使用 <strong>implements</strong> 操作符。类中必须实现接口中定义的所有方法，否则会报一个致命错误。类可以实现多个接口，用逗号来分隔多个接口的名称。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明一个接口  </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Bus</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getByBus</span>(<span class=\"params\"></span>)</span>;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">people</span> <span class=\"keyword\">implements</span> <span class=\"title\">Bus</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getByBus</span>(<span class=\"params\"></span>)  </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;        <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Implement getByBus() method.  </span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">array</span>(  </span><br><span class=\"line\">            <span class=\"string\">&quot;red bus&quot;</span>,  </span><br><span class=\"line\">            <span class=\"string\">&quot;black bus&quot;</span>,  </span><br><span class=\"line\">            <span class=\"string\">&quot;white bus&quot;</span>  </span><br><span class=\"line\">        );  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"variable\">$test1</span> = <span class=\"keyword\">new</span> <span class=\"title function_ invoke__\">people</span>();  </span><br><span class=\"line\"><span class=\"title function_ invoke__\">var_dump</span>(<span class=\"variable\">$test1</span>-&gt;<span class=\"title function_ invoke__\">getByBus</span>());</span><br></pre></td></tr></table></figure>\n<h4 id=\"调用父类构造方法\"><a class=\"markdownIt-Anchor\" href=\"#调用父类构造方法\">#</a> 调用父类构造方法</h4>\n<p>PHP 不会再子类的构造方法中自动调用父类的构造方法。要执行父类的构造方法，需要再子类的构造方法中 <code>parent::__construct()</code> .</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">baseClass</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">&quot;BaseClass 类中构造方法&quot;</span> . <span class=\"string\">&quot;\\n&quot;</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubClass</span> <span class=\"keyword\">extends</span> <span class=\"title\">baseClass</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)  </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;        <span class=\"built_in\">parent</span>::<span class=\"title function_ invoke__\">__construct</span>(); <span class=\"comment\">// 子类构造方法不能自动调用父类的构造方法  </span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">&quot;SubClass 类中的方法&quot;</span>. <span class=\"string\">&quot;\\n&quot;</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OtherSubClass</span> <span class=\"keyword\">extends</span> <span class=\"title\">baseClass</span> </span>&#123;  </span><br><span class=\"line\"><span class=\"comment\">//    继承baseClass 构造方法  </span></span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"comment\">// 调用 BaseClass 构造方法  </span></span><br><span class=\"line\"><span class=\"variable\">$obj</span> = <span class=\"keyword\">new</span> <span class=\"title function_ invoke__\">baseClass</span>();  </span><br><span class=\"line\"><span class=\"comment\">// 调用 BaseClass、SubClass 构造方法  </span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"variable\">$obj</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">SubClass</span>();  </span><br><span class=\"line\"><span class=\"comment\">// 调用 BaseClass 构造方法  </span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"variable\">$obj</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">OtherSubClass</span>();</span><br></pre></td></tr></table></figure>",
            "tags": [
                "PHP",
                "PHP"
            ]
        },
        {
            "id": "https://www.naraci.top/post/19644.html",
            "url": "https://www.naraci.top/post/19644.html",
            "title": "微信小程序开发自定义页面跳转报错navigateTo:fail page xxx is not found",
            "date_published": "2023-04-12T01:38:04.000Z",
            "content_html": "<h2 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>今天在写页面跳转的时候调试点击时总是提示报错信息<br>\n<img data-src=\"https://raw.githubusercontent.com/NAILIANGCHI/image-bed/main/202304051715989.png\" alt=\"\"><br>\n试了好多次都不行，纳闷半天路径也不可能错，都说按照自动补全的在面向搜索引擎和官方文档半天，发现了头绪，两个一对比原来是自动补全给我加了个文件后缀名。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//官方文档:</span></span><br><span class=\"line\">wx.<span class=\"property\">navigateTo</span>:(&#123;</span><br><span class=\"line\"><span class=\"attr\">url</span>:<span class=\"string\">&#x27;/pages/test/test&#x27;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://raw.githubusercontent.com/NAILIANGCHI/image-bed/main/202304051718529.png\" alt=\"\"><br>\n说实话，这样很鸡肋跳转到这个页面你就加上呗不加你自动补全这个也就去掉😥</p>\n",
            "tags": [
                "微信小程序开发",
                "微信小程序开发"
            ]
        },
        {
            "id": "https://www.naraci.top/post/5856.html",
            "url": "https://www.naraci.top/post/5856.html",
            "title": "JavaScript函数用法",
            "date_published": "2022-12-17T15:35:01.000Z",
            "content_html": "<h1 id=\"javascript-函数语法\"><a class=\"markdownIt-Anchor\" href=\"#javascript-函数语法\">#</a> Javascript 函数语法</h1>\n<p>函数是由事件驱动的或者当它被调用时执行的可重复使用的代码块。</p>\n<p>函数包裹在花括号的代码块，前面使用函数名 funciton</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">hanshu</span> ()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//执行代码</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">innerHTML = hanshu    <span class=\"comment\">//在js文件这么写可以在HTML导入引用js文件即可</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Javascript 对大小写敏感。关键词 function 必须事小写的，并且必须以与函数名称相同的大小写来调用函数。</p>\n<h1 id=\"调用带参数的函数\"><a class=\"markdownIt-Anchor\" href=\"#调用带参数的函数\">#</a> 调用带参数的函数</h1>\n<p>在调用函数时，可以向其传递值，这些值被称为参数。</p>\n<blockquote>\n<p>例:myfunction (argumentl,argument2)<br>\n 变量和参数必须按一致顺序出现。第一个变量对应的是第一个被传递的参数的值。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//HTML文件</span></span><br><span class=\"line\">&lt;button onclick=<span class=\"string\">&quot;hanshu(&#x27;naraci&#x27;,&#x27;student&#x27;)&gt;点我&lt;/button&gt;&quot;</span>  <span class=\"comment\">//参数必须加单引号</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//js文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myfunction</span>(<span class=\"params\">name,job</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"title function_\">alert</span>(<span class=\"string\">&quot;欢迎&quot;</span>+name+<span class=\"string\">&quot;的&quot;</span>+<span class=\"string\">&quot;访问&quot;</span>+<span class=\"string\">&quot;他是&quot;</span>+job);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "JavaScript",
                "JavaScript"
            ]
        },
        {
            "id": "https://www.naraci.top/post/59758.html",
            "url": "https://www.naraci.top/post/59758.html",
            "title": "JavaScript对象用法",
            "date_published": "2022-12-17T15:35:01.000Z",
            "content_html": "<h1 id=\"javascript对象\"><a class=\"markdownIt-Anchor\" href=\"#javascript对象\">#</a> Javascript 对象</h1>\n<p>在 JavaScript 中所有事物都是对象。<br>\n对象也是一个变量，但对象可以包含多个值 (多个变量)，每个值以 <code>name:value</code>  对呈现</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> car = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&quot;Fiat&quot;</span>, <span class=\"attr\">model</span>:<span class=\"number\">500</span>, <span class=\"attr\">color</span>:<span class=\"string\">&quot;white&quot;</span>&#125;;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>以上三个值赋予变量 car</p>\n</blockquote>\n<h1 id=\"对象定义\"><a class=\"markdownIt-Anchor\" href=\"#对象定义\">#</a> 对象定义</h1>\n<p>可以使用字符来定义和创建 JavaScript 对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;<span class=\"attr\">firstName</span>:<span class=\"string\">&quot;John&quot;</span>, <span class=\"attr\">lastName</span>:<span class=\"string\">&quot;Doe&quot;</span>, <span class=\"attr\">age</span>:<span class=\"number\">50</span>, <span class=\"attr\">eyeColor</span>:<span class=\"string\">&quot;blue&quot;</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//或者</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;  </span><br><span class=\"line\">    <span class=\"attr\">firstName</span>:<span class=\"string\">&quot;John&quot;</span>,  </span><br><span class=\"line\">    <span class=\"attr\">lastName</span>:<span class=\"string\">&quot;Doe&quot;</span>,  </span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"number\">50</span>,  </span><br><span class=\"line\">    <span class=\"attr\">eyeColor</span>:<span class=\"string\">&quot;blue&quot;</span>  </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>定义 JavaScript 对象可以跨越多行，空格换行不是必须的：</p>\n</blockquote>\n<h1 id=\"对象属性\"><a class=\"markdownIt-Anchor\" href=\"#对象属性\">#</a> 对象属性</h1>\n<p>可以说是”JavaScript“对象是变量的容器。<br>\n但是，我们通常认为”JavaScript” 对象是键值对的容器。<br>\n键值对通常写法为 <code>name:value</code>  (键与值以冒号分割)。<br>\n键值对在 JavaScript 对象通常称为<em><strong>对象属性</strong></em><br>\n对象键值对的写法类似于：</p>\n<ul>\n<li>PHP 中关联的数组</li>\n<li>Python 中的字典</li>\n<li>C 语言中的哈希表</li>\n<li>Java 中的哈希映射</li>\n<li>Ruby 和 perl 中的哈希表</li>\n</ul>\n<h1 id=\"访问对象属性\"><a class=\"markdownIt-Anchor\" href=\"#访问对象属性\">#</a> 访问对象属性</h1>\n<p>第一种：</p>\n<blockquote>\n<p><code>person.lastName</code></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">    firstName : <span class=\"string\">&quot;John&quot;</span>,</span><br><span class=\"line\">    lastName : <span class=\"string\">&quot;Doe&quot;</span>,</span><br><span class=\"line\">    id : <span class=\"number\">5566</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;demo&quot;</span>).<span class=\"property\">innerHTML</span> =</span><br><span class=\"line\">\tperson.<span class=\"property\">firstName</span> + <span class=\"string\">&quot; &quot;</span> + person.<span class=\"property\">lastName</span>;</span><br></pre></td></tr></table></figure>\n<p>第二种：</p>\n<blockquote>\n<p>‘person[“lastName”]’</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">    <span class=\"attr\">firstName</span>: <span class=\"string\">&quot;John&quot;</span>,</span><br><span class=\"line\">    lastName : <span class=\"string\">&quot;Doe&quot;</span>,</span><br><span class=\"line\">    id : <span class=\"number\">5566</span>,</span><br><span class=\"line\">    fullName : <span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">firstName</span> + <span class=\"string\">&quot; &quot;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">lastName</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;demo&quot;</span>).<span class=\"property\">innerHTML</span> = person.<span class=\"title function_\">fullName</span>();</span><br></pre></td></tr></table></figure>\n<p>对象的方法定义了一个函数，并作为对象的属性存储。</p>\n<p>对象方法通过添加 () 调用 (作为一个函数)。</p>\n<p>该实例访问了 person 对象的 fullName () 方法:</p>\n<h1 id=\"访问对象方法\"><a class=\"markdownIt-Anchor\" href=\"#访问对象方法\">#</a> 访问对象方法</h1>\n<p>可以使用以下语法创建对象方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methodName : <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>实列</strong>：可以使用以下语法访问对象方法：</p>\n</blockquote>\n<p><code>objectName:function() &#123;&#125;</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">    <span class=\"attr\">firstName</span>: <span class=\"string\">&quot;John&quot;</span>,</span><br><span class=\"line\">    lastName : <span class=\"string\">&quot;Doe&quot;</span>,</span><br><span class=\"line\">    id : <span class=\"number\">5566</span>,</span><br><span class=\"line\">    fullName : <span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">firstName</span> + <span class=\"string\">&quot; &quot;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">lastName</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;demo&quot;</span>).<span class=\"property\">innerHTML</span> = person.<span class=\"title function_\">fullName</span>();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>",
            "tags": [
                "JavaScript",
                "JavaScript"
            ]
        },
        {
            "id": "https://www.naraci.top/post/4a3bb1da.html",
            "url": "https://www.naraci.top/post/4a3bb1da.html",
            "title": "学习T签到接口",
            "date_published": "2022-12-10T15:35:01.000Z",
            "content_html": "<h2 id=\"接口\"><a class=\"markdownIt-Anchor\" href=\"#接口\">#</a> 接口:</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://112.124.65.228:78/main.php?account=账号&amp;password=密码</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何使用接口\"><a class=\"markdownIt-Anchor\" href=\"#如何使用接口\">#</a> 如何使用接口？</h2>\n<p>在 url 链接对应文字描述替换成你的参数点击访问即可！</p>\n<h3 id=\"如何让他全自动运行呢\"><a class=\"markdownIt-Anchor\" href=\"#如何让他全自动运行呢\">#</a> 如何让他全自动运行呢？</h3>\n<p>填写好参数后将 url 链接放至监控平台定时访 url 即可！<br>\n<img data-src=\"http://image.naraci.top/2022/05/19/53bc5c5a81f22.png\" alt=\"\"></p>\n",
            "tags": [
                "Course",
                "Course"
            ]
        },
        {
            "id": "https://www.naraci.top/post/f93b2adf.html",
            "url": "https://www.naraci.top/post/f93b2adf.html",
            "title": "网络爬虫--Python",
            "date_published": "2022-11-23T15:35:01.000Z",
            "content_html": "<h1 id=\"库\"><a class=\"markdownIt-Anchor\" href=\"#库\">#</a> 库</h1>\n<p>request：自动爬取 HTML 页面，自动网络请求提交<br>\n robots.txt: 网络爬虫排除标准<br>\n beautiful soup：解析 HTML 页面<br>\n Re: 正则表达式（用于提取需要的信息）</p>\n<h2 id=\"request方法\"><a class=\"markdownIt-Anchor\" href=\"#request方法\">#</a> request 方法</h2>\n<p>requests.request (): 构造一个请求支撑以下各方法的基础方法<br>\n requests.get (): 获取 HTML 网页的主要方法对应 HTTP 的 get<br>\nrequests.head (): 获取 HTML 网页头部的信息方法对应 HTTP 的 head<br>\nrequests.post (): 向 HTML 网页提交 post 请求方法，对应 HTTP 的 post<br>\nrequests.put (): 向 HTML 提交 put 请求方法，对应 HTTP 的 put</p>\n<h3 id=\"对象属性\"><a class=\"markdownIt-Anchor\" href=\"#对象属性\">#</a> 对象属性</h3>\n<p>r.status_code: HTTP 请求返回状态，200 表示成功，404 表示失败<br>\n r.txt: HTTP 响应内容的字符串方式，即 url 对应的页面内容<br>\n re.encoding: 从 HTTP header 中猜测的响应内容编码形式<br>\n r.apparent_encoding: 从内容分析出的响应编码方式（备用编码）<br>\nr.content HTTP 响应内容的二进制形式</p>\n<h1 id=\"handler处理器的基本使用\"><a class=\"markdownIt-Anchor\" href=\"#handler处理器的基本使用\">#</a> handler 处理器的基本使用</h1>\n<ol>\n<li>获取 hanlder 的方法<br>\n opener = urllib.request.HttoHandler ()</li>\n<li>获取 opener 对象<br>\n opener = urllib.requst.build_opener (handler)</li>\n<li>调用 open 方法<br>\n response = opener.open (request)</li>\n</ol>\n<p>content = response.read().decode(‘utf-8’)<br>\n(可以使用代理)</p>\n<h1 id=\"解析页面\"><a class=\"markdownIt-Anchor\" href=\"#解析页面\">#</a> 解析页面</h1>\n<p><strong>常用的三个方法</strong></p>\n<ol>\n<li>Xpath        // 获取网页源码的部分数据</li>\n<li>JsonPath    //</li>\n<li>BeautifulSoup</li>\n</ol>\n<p><strong>1.Xapth</strong></p>\n<table>\n<thead>\n<tr>\n<th>表达式</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>nodename</td>\n<td>选取此节点所有节点</td>\n</tr>\n<tr>\n<td>/</td>\n<td>从根节点选取。</td>\n</tr>\n<tr>\n<td>//</td>\n<td>从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置</td>\n</tr>\n<tr>\n<td>.</td>\n<td>选取当前节点</td>\n</tr>\n<tr>\n<td>…</td>\n<td>选取当前节点的父节点</td>\n</tr>\n<tr>\n<td>@</td>\n<td>选取当前属性</td>\n</tr>\n</tbody>\n</table>\n<p><strong>选取未知节点</strong><br>\n XPath 通配符可用来选取位置的 XML 元素。</p>\n<table>\n<thead>\n<tr>\n<th>通配符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>*</td>\n<td>匹配任何元素节点</td>\n</tr>\n<tr>\n<td>@*</td>\n<td>匹配任何属性节点</td>\n</tr>\n<tr>\n<td>node()</td>\n<td>匹配任何类型的节点</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "Python",
                "Python"
            ]
        },
        {
            "id": "https://www.naraci.top/post/5911a52a.html",
            "url": "https://www.naraci.top/post/5911a52a.html",
            "title": "Java打印乘法表",
            "date_published": "2022-11-08T15:35:01.000Z",
            "content_html": "<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> top.naraci.shenzhaoyu;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> class 九九乘法表 &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; j &lt;= <span class=\"number\">9</span>; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;= j; i++) &#123;</span><br><span class=\"line\">            System.out.print(j+<span class=\"string\">&quot;*&quot;</span>+i+<span class=\"string\">&quot;=&quot;</span>+(j*i)+<span class=\"string\">&quot;\\t&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://i.bmp.ovh/imgs/2021/12/6543c8283999b67b.png\" alt=\" \"></p>\n",
            "tags": [
                "Java",
                "Java"
            ]
        },
        {
            "id": "https://www.naraci.top/post/37627.html",
            "url": "https://www.naraci.top/post/37627.html",
            "title": "网络爬虫_写真网实战",
            "date_published": "2022-11-08T15:35:01.000Z",
            "content_html": "<p>网络爬虫写真网实战，请勿大量爬取仅供参考学习<br>\n需要再文件位置创建 meitu 文件夹用于存放图片</p>\n<h1 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\">#</a> 代码</h1>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-  </span></span><br><span class=\"line\"><span class=\"comment\"># @Time    : 2022/10/26 7:41  </span></span><br><span class=\"line\"><span class=\"comment\"># @Author  : Naraci  </span></span><br><span class=\"line\"><span class=\"comment\"># @File    : 写真优化重构版.py  </span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">import</span> parsel  </span><br><span class=\"line\"><span class=\"keyword\">import</span> requests  </span><br><span class=\"line\">  </span><br><span class=\"line\">headers = &#123;  </span><br><span class=\"line\">    <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 &#x27;</span>  </span><br><span class=\"line\">                  <span class=\"string\">&#x27;Safari/537.36 &#x27;</span>&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">url_request</span>(<span class=\"params\">url</span>):  </span><br><span class=\"line\">    request = requests.get(url=url, headers=headers)  </span><br><span class=\"line\">    <span class=\"comment\"># 设置编码格式防止乱码  </span></span><br><span class=\"line\">    request.encoding = <span class=\"string\">&#x27;utf-8&#x27;</span>  </span><br><span class=\"line\">    html_text = request.text  </span><br><span class=\"line\">    <span class=\"comment\"># 转换数据类型  </span></span><br><span class=\"line\">    parse_forats = parsel.Selector(html_text)  </span><br><span class=\"line\">    parse_forats_list = parse_forats.xpath(<span class=\"string\">&#x27;//section//div//ul//span/text()&#x27;</span>).getall()[-<span class=\"number\">1</span>]  <span class=\"comment\"># 取该页面总页数  </span></span><br><span class=\"line\">    num_list = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> parse_forats_list <span class=\"keyword\">if</span> <span class=\"built_in\">str</span>.isdigit(i)]  <span class=\"comment\"># Python isdigit() 方法检测字符串是否只由数字组成。返回True or False.  </span></span><br><span class=\"line\">    add_list = <span class=\"string\">&#x27;&#x27;</span>  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> num_list:  </span><br><span class=\"line\">        add_list = add_list + i  </span><br><span class=\"line\">  </span><br><span class=\"line\">    number_end = <span class=\"built_in\">int</span>(add_list)  <span class=\"comment\"># 转换成整数类型  </span></span><br><span class=\"line\">    <span class=\"comment\"># 页面地址 https://www.wxept.com/qqmn/rbmn/page/2    html_url = url  </span></span><br><span class=\"line\">    <span class=\"comment\"># 遍历每个页面地址  </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> page <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, number_end + <span class=\"number\">1</span>):  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> page == <span class=\"number\">1</span>:  </span><br><span class=\"line\">            request_url = html_url  </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:  </span><br><span class=\"line\">            request_url = html_url + <span class=\"string\">&#x27;/page/&#x27;</span> + <span class=\"built_in\">str</span>(page)  </span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;正在下载:&#x27;</span> + request_url + <span class=\"string\">&#x27;页面！&#x27;</span>)  </span><br><span class=\"line\">        <span class=\"comment\"># for page_list in range(1, number_end + 1):  </span></span><br><span class=\"line\">        request_url.encode(<span class=\"string\">&#x27;utf-8&#x27;</span>)  </span><br><span class=\"line\">        url_list = requests.get(url=request_url, headers=headers)  </span><br><span class=\"line\">        selector = url_list.text  </span><br><span class=\"line\">        selector = parsel.Selector(selector)  <span class=\"comment\"># 转换数据类型  </span></span><br><span class=\"line\">        content = selector.xpath(<span class=\"string\">&#x27;//div//div/article&#x27;</span>)  <span class=\"comment\"># 获取所有需要的标签  </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> article <span class=\"keyword\">in</span> content:  </span><br><span class=\"line\">            pic_title = article.xpath(<span class=\"string\">&#x27;./h2/a/text()&#x27;</span>).get()  <span class=\"comment\"># 套图标题 用于命名文件夹  返回为对象属性需要用get取出来  </span></span><br><span class=\"line\">            pic_url = article.xpath(<span class=\"string\">&#x27;./h2/a/@href&#x27;</span>).get()  </span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;已将相册：&#x27;</span> + pic_title + <span class=\"string\">&#x27;添加到队列！&#x27;</span>)  </span><br><span class=\"line\">    <span class=\"comment\">#         pic_url = &#x27;https://www.wxept.com/8762.html&#x27;  </span></span><br><span class=\"line\">    <span class=\"comment\"># #         pic_url = &#x27;https://www.wxept.com/8879.html&#x27;            # 发送相册页面地址  </span></span><br><span class=\"line\">            response_pic = requests.get(url=pic_url, headers=headers).text  </span><br><span class=\"line\">            <span class=\"comment\"># 获取相册页面所有页数  </span></span><br><span class=\"line\">            selector_2 = parsel.Selector(response_pic)  </span><br><span class=\"line\">            img_url = selector_2.xpath(<span class=\"string\">&#x27;//div/a/span&#x27;</span>).getall()[-<span class=\"number\">2</span>]  </span><br><span class=\"line\">            num_list = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> img_url <span class=\"keyword\">if</span> <span class=\"built_in\">str</span>.isdigit(i)]  <span class=\"comment\"># Python isdigit() 方法检测字符串是否只由数字组成。返回True or False.  </span></span><br><span class=\"line\">            add_list = <span class=\"string\">&#x27;&#x27;</span>  </span><br><span class=\"line\">            number_list = pic_url.split(<span class=\"string\">&#x27;.html&#x27;</span>)[<span class=\"number\">0</span>]  </span><br><span class=\"line\">            <span class=\"comment\"># # 遍历出所有页面  </span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> num_list:  </span><br><span class=\"line\">                add_list = add_list + i  </span><br><span class=\"line\">            number_end = <span class=\"built_in\">int</span>(add_list)  </span><br><span class=\"line\">            <span class=\"keyword\">for</span> page <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, number_end + <span class=\"number\">1</span>):  </span><br><span class=\"line\">                <span class=\"keyword\">if</span> page == <span class=\"number\">1</span>:  </span><br><span class=\"line\">                    request_html_url = number_list + <span class=\"string\">&#x27;.html&#x27;</span>  </span><br><span class=\"line\">                <span class=\"keyword\">else</span>:  </span><br><span class=\"line\">                    request_html_url = number_list + <span class=\"string\">&#x27;.html/&#x27;</span> + <span class=\"built_in\">str</span>(page)  </span><br><span class=\"line\">                <span class=\"built_in\">print</span>(request_html_url)  </span><br><span class=\"line\">                <span class=\"comment\">#解析图片地址  </span></span><br><span class=\"line\">                response_pic = requests.get(url=request_html_url, headers=headers).text  </span><br><span class=\"line\">                selector_2 = parsel.Selector(response_pic)  </span><br><span class=\"line\">                img_url = selector_2.xpath(<span class=\"string\">&#x27;//section//article//a/img/@src&#x27;</span>).getall()  </span><br><span class=\"line\">                <span class=\"keyword\">for</span> pic_url <span class=\"keyword\">in</span> img_url:  </span><br><span class=\"line\">                    <span class=\"comment\"># 发送图片链接请求，获取图片数据以二进制数据保存  </span></span><br><span class=\"line\">                    img_data = requests.get(url=pic_url, headers=headers).content  </span><br><span class=\"line\">                    <span class=\"comment\"># 数据保存  </span></span><br><span class=\"line\">                    fil_name = pic_url.split(<span class=\"string\">&#x27;/&#x27;</span>)[-<span class=\"number\">1</span>]  <span class=\"comment\"># 获取图片名字  </span></span><br><span class=\"line\">                    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;meitudownload\\\\&#x27;</span> + fil_name, mode=<span class=\"string\">&#x27;wb&#x27;</span>) <span class=\"keyword\">as</span> fp:  <span class=\"comment\"># wb 二进制  </span></span><br><span class=\"line\">                        fp.write(img_data)  </span><br><span class=\"line\">                        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;下载完成:&#x27;</span> + fil_name)  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:  </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;请在文件目录手动新建meitudownload目录&#x27;</span>)  </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;在下面网址复制url粘贴值下方：https://www.wxept.com/qqmn/&#x27;</span>)  </span><br><span class=\"line\">    put_url = <span class=\"built_in\">input</span>(<span class=\"string\">&#x27;请输入正确分类页面url:&#x27;</span>)  </span><br><span class=\"line\">    <span class=\"comment\"># url = &#x27;https://www.wxept.com/qqmn/dlmn&#x27;  </span></span><br><span class=\"line\">    url = put_url  </span><br><span class=\"line\">    url_request(url)  </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;全部下载成功！&#x27;</span>)  </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"comment\"># 文件根目录手动创建meitu文件夹</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"文件下载\"><a class=\"markdownIt-Anchor\" href=\"#文件下载\">#</a> 文件下载</h1>\n<p>源代码和 exe 成品文件<span class=\"exturl\" data-url=\"aHR0cDovL3Bhbi5uYXJhY2kudG9wL3MvWDN6czY=\">点击下载</span></p>\n",
            "tags": [
                "Python",
                "Python"
            ]
        },
        {
            "id": "https://www.naraci.top/post/21093.html",
            "url": "https://www.naraci.top/post/21093.html",
            "title": "网络Python用法速查",
            "date_published": "2022-11-07T15:35:01.000Z",
            "content_html": "<h1 id=\"字符串高级\"><a class=\"markdownIt-Anchor\" href=\"#字符串高级\">#</a> 字符串高级</h1>\n<p>字符串的常见操作</p>\n<ul>\n<li>获取长度 ：len  len 函数可以获取字符串的长度</li>\n<li>查找内容 ：find   查找指定内容在字符串中是否存在，如果存在就返回改内容在字符串中第一次出现的位置索引值，如果不存在返回 1</li>\n<li>判断：startswith,endswith   判断字符串是不是以谁谁谁开头 / 结尾</li>\n<li>计算出现的次数：count   返回 str 在 start 和 end 之间 在 mystr 里面出现的次数</li>\n<li>替换内容：replace   替换字符的内容切割字符串</li>\n<li>修改大小写： upper，lower   将字符串中的大小写互换</li>\n<li>空格处理： strip    去空格</li>\n<li>字符串拼接:  join   字符串拼接</li>\n</ul>\n<h1 id=\"列表的高级\"><a class=\"markdownIt-Anchor\" href=\"#列表的高级\">#</a> 列表的高级</h1>\n<p>列表的增删改查</p>\n<ul>\n<li>append: 在末尾添加元素</li>\n<li>insert : 在指定位置插入元素</li>\n<li>extend：合并两个列表</li>\n<li>修改 ：通过下标来修改</li>\n<li>del：根据下标删除</li>\n<li>pop：删除最后一个元素</li>\n<li>remov：根据元素的值删除元素</li>\n</ul>\n<h1 id=\"查找高级\"><a class=\"markdownIt-Anchor\" href=\"#查找高级\">#</a> 查找高级</h1>\n<ul>\n<li>in : 用法例子：if i in list ():    // 可以理解为 i 变量是否在 list 的里面（判断这个元素是否在某个列表中）</li>\n<li>not in : 和上面的 in 是相反的意思是相反的意思用法和 in 一样</li>\n</ul>\n<h1 id=\"切片\"><a class=\"markdownIt-Anchor\" href=\"#切片\">#</a> 切片</h1>\n<p>使用列表下标来切<br>\n s = ‘china’<br>\nprint (s [2])   // 会打印出 i<br>\nprint (s [:3])  // 会打印出 chin<br>\n 步长默认为 1 也可以不写</p>\n<h1 id=\"字典的高级用法\"><a class=\"markdownIt-Anchor\" href=\"#字典的高级用法\">#</a> 字典的高级用法</h1>\n<p>获取字典内的值两个方法</p>\n<ol>\n<li>字典名 [’字典内的值]</li>\n<li>字典名.get (‘字典内的值’)</li>\n</ol>\n<blockquote>\n<p>两者不同的是当字典内没有该值 1 方法会报错而 2 方法会返回 None 空的值</p>\n</blockquote>\n<p>字典修改：直接字典名 [‘对应的值’] = 要修改的值</p>\n<p>字典的添加：字典名 [‘值’] = 要添加的值    // 如果字典里面没有这个值则会添加，如果有则会成为修改。</p>\n<p>字典中的删除：有两个方法一个是 del 另一个是 clear 两者虽然都是删除但是作用还是有区别的，del 是删除指定的值和删除整个字典，clear 则是清空字典内容但是保留字典对象</p>\n<p>遍历：就是将数据一个一个输出</p>\n<h1 id=\"函数\"><a class=\"markdownIt-Anchor\" href=\"#函数\">#</a> 函数</h1>\n<p>def 声明函数<br>\n格式：def 函数名 (可以放形参)<br>\n 而调用函数<br>\n格式：def 函数名 (放实参)</p>\n<p>函数的局部变量和全局变量</p>\n<p>局部变量：在函数内部定义的变量叫做局部变量<br>\n全局变量：在函数外部定义的变量称之为全局变量，它可以在函数内使用也可以在函数外部使用。</p>\n<p>文件的操作 I/o</p>\n<p>Python 打开和关闭文件<br>\n open 函数<br>\n打开文件<br>\n格式：open (文件路径，访问模式)<br>\n 关闭文件<br>\n格式：<br>\nfp = open (文件路径，访问模式)  // 打开文件<br>\n fp. write (写入文件内容)  // 写入文件<br>\n fp.close ()  // 关闭文件<br>\n fp.read () // 读取文件内容<br>\n read 是按一个字节一个字节读取的效率比较慢<br>\n readline 是按一行一行读取的但是返回的是一个列表</p>\n<p>访问模式<br>\n w : 读写<br>\n r: 仅读<br>\n a: 在文件内容后面追加内容，如果没有该文件则会创建文件并写入内容<br>\n r+: 打开文件并将指针移到文件的开头，若没有该文件则会创建新的文件<br>\n wb: 以二进制模式打开文件用于读写，若没有该文件则会创建新的文件并写入</p>\n<p>urlib 六个使用方法</p>\n",
            "tags": [
                "python",
                "python"
            ]
        },
        {
            "id": "https://www.naraci.top/post/85.html",
            "url": "https://www.naraci.top/post/85.html",
            "title": "CSS笔记",
            "date_published": "2022-11-03T15:35:01.000Z",
            "content_html": "<h1 id=\"文本对齐方式\"><a class=\"markdownIt-Anchor\" href=\"#文本对齐方式\">#</a> 文本对齐方式</h1>\n<p>text-align:center 居中<br>\n text-align:right 向右对齐<br>\n text-align:jusitfy 每行被展开为宽度相等，左，右外边距是对齐。</p>\n<h1 id=\"文本修饰\"><a class=\"markdownIt-Anchor\" href=\"#文本修饰\">#</a> 文本修饰</h1>\n<p>text-decoration:none 用于删除下划线<br>\n text-indent:50px 文本缩进用来指定文本的第一行缩进。<br>\nfont-style:normal 正常显示文本<br>\n font-style:italic 以斜体字显示的文字<br>\n font-size 控制文字大小</p>\n<h1 id=\"链接样式\"><a class=\"markdownIt-Anchor\" href=\"#链接样式\">#</a> 链接样式</h1>\n<p>a:link {color:#000000;} /* 未访问链接 */<br>\na:visited {color:#00FF00;} /* 已访问链接 <em>/<br>\na:hover {color:#FF00FF;} /</em> 鼠标移动到链接上 <em>/<br>\na:active {color:#0000FF;} /</em> 鼠标点击时 */<br>\n<strong> 常见的链接样式</strong></p>\n<p>link 链接<br>\n visited 访问<br>\n hover 悬停<br>\n active 活动</p>\n<h1 id=\"盒子模型box-model\"><a class=\"markdownIt-Anchor\" href=\"#盒子模型box-model\">#</a> 盒子模型（Box Model）</h1>\n<p>盒子包含：<br>\n外边距 - Margin：清除外边框的区域，外边距是透明的<br>\n边框 - Border：围绕在内边距和外边距的边框<br>\n内边距 - Padding：清除内容周围的区域，外边距是透明的<br>\n实际内容 - Content：盒子的内容，显示文本和图像</p>\n<p>总元素的宽度：宽度 + 左填充 + 右填充 + 左边框 + 右边框 + 左边距 + 右边距</p>\n<p>总元素的高度：高度 + 顶部填充 + 底部填充 + 上边框 + 下边框 + 上边距 + 下边距</p>\n<h1 id=\"border边框\"><a class=\"markdownIt-Anchor\" href=\"#border边框\">#</a> Border (边框)</h1>\n<p><strong>border-style</strong><br>\ndotted：定义一个点线边框<br>\n dashed：定义一个虚线边框<br>\n solid：定义一个实体边框<br>\n double：定义两个边框，两个边框的宽度和 border-width 的值相同<br>\n groove：定义 3D 沟槽边框，效果取决于边框的颜色值<br>\n ridge：定义 3D 脊边框，效果取决于颜色值<br>\n inset：定义一个 3D 的嵌入边框吗，效果取决于边框的颜色值<br>\n outset：定义一个 3D 突出边框。效果取决于边框的颜色值</p>\n<p><strong>边框 - 单独设置各边</strong><br>\n border-top-style:dotted;<br>\nborder-right-style:solid;<br>\nborder-bottom-style:dotted;<br>\nborder-left-style:solid;</p>\n<h1 id=\"css轮廓outline\"><a class=\"markdownIt-Anchor\" href=\"#css轮廓outline\">#</a> css 轮廓 (outline)</h1>\n<p>轮框是绘制元素周期的一条线，位于边框边缘的外围，可以起到突出元素的作用。<br>\nps：outline 是不占空间的，既不会增加额外的 width 或者 height</p>\n<p><strong>outline</strong>（在一个声明中设置所有的轮廓属性）<br>\n值：<br>\n_outline-color<br>\noutline-style<br>\noutline-width<br>\ninherit</p>\n<p><strong>outline-color</strong> (设置轮廓的颜色)<br>\n 值：<br>\ncolor-name<br>\nhex-number<br>\nrgb-number<br>\n_invert<br>\ninherit</p>\n<p><strong>outline-style</strong> (设置轮廓样式)<br>\n 值：</p>\n<pre><code>none  \ndotted  \ndashed  \nsolid  \ndouble  \ngroove  \nridge  \ninset  \noutset  \n</code></pre>\n<p>inherit</p>\n<p>outline-width（设置轮廓宽度）<br>\n值：<br>\nthin<br>\nmedium<br>\nthick<br>\n_length<br>\ninherit</p>\n",
            "tags": [
                "css",
                "css"
            ]
        },
        {
            "id": "https://www.naraci.top/post/8c17a938.html",
            "url": "https://www.naraci.top/post/8c17a938.html",
            "title": "用Python编写的抖音无水印视频代码",
            "date_published": "2022-10-17T15:35:01.000Z",
            "content_html": "<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># author:Naraci  </span></span><br><span class=\"line\"><span class=\"comment\"># time:14:44  </span></span><br><span class=\"line\"><span class=\"comment\"># file:DouYing_Video.py  </span></span><br><span class=\"line\"><span class=\"comment\"># IDE:PyCharm  </span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">import</span> requests  </span><br><span class=\"line\"><span class=\"keyword\">import</span> re  </span><br><span class=\"line\"><span class=\"keyword\">import</span> os  </span><br><span class=\"line\"><span class=\"keyword\">import</span> unicodedata  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;欢迎使用奈良池DY无水印解析系统\\n&quot;</span>)  </span><br><span class=\"line\"><span class=\"keyword\">if</span> os.path.exists(<span class=\"string\">&#x27;D:/抖音无水印解析视频&#x27;</span>):  </span><br><span class=\"line\">    wjml = os.path.exists  </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;检测到已有该目录&quot;</span>)  </span><br><span class=\"line\"><span class=\"keyword\">else</span>:  </span><br><span class=\"line\">    os.makedirs(<span class=\"string\">&quot;D:/抖音无水印解析视频&quot;</span>)  </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;以为您创建下载目录&quot;</span>)  </span><br><span class=\"line\">  </span><br><span class=\"line\">pre_savename = <span class=\"string\">&#x27;D:/抖音无水印解析视频/&#x27;</span>  </span><br><span class=\"line\">name = <span class=\"string\">&quot;下载成功文件已保存至&quot;</span>  </span><br><span class=\"line\">  </span><br><span class=\"line\">headers = &#123;  </span><br><span class=\"line\">    <span class=\"string\">&quot;user-agent&quot;</span>: <span class=\"string\">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &quot;</span>  </span><br><span class=\"line\">                  <span class=\"string\">&quot;Chrome/99.0.4844.51 Safari/537.36 Edg/99.0.1150.30 &quot;</span>&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">UrlGet</span>(<span class=\"params\">url</span>):  </span><br><span class=\"line\">    <span class=\"keyword\">try</span>:  </span><br><span class=\"line\">        r = requests.get(url, timeout=<span class=\"number\">30</span>)  </span><br><span class=\"line\">        r.raise_for_status()  <span class=\"comment\"># 输出异常信息  </span></span><br><span class=\"line\">        r.encoding = r.apparent_encoding  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> r.text  <span class=\"comment\"># 将网页信息内容返回给其他程序块  </span></span><br><span class=\"line\">    <span class=\"keyword\">except</span>:  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&#x27;</span>  <span class=\"comment\"># 将异常内容返回空字符串  </span></span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">UrlHandle</span>(<span class=\"params\">url</span>):  </span><br><span class=\"line\">    shorturl = re.findall(<span class=\"string\">&quot;https?://[a-z./A-Z0-9]+&quot;</span>, url)  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(shorturl) == <span class=\"number\">1</span>:  </span><br><span class=\"line\">        VideoShoutUrl = shorturl[<span class=\"number\">0</span>]  </span><br><span class=\"line\">        url = requests.get(VideoShoutUrl, headers=headers).url  </span><br><span class=\"line\">        VideoPage = requests.post(url=url, headers=headers)  </span><br><span class=\"line\">        <span class=\"comment\"># 匹配视频地址  </span></span><br><span class=\"line\">        regular = re.findall(<span class=\"string\">&#x27;src(.*?)mp4&#x27;</span>, VideoPage.text)[<span class=\"number\">1</span>]  </span><br><span class=\"line\">        <span class=\"comment\"># 解码  </span></span><br><span class=\"line\">        video_url = requests.utils.unquote(regular).replace(<span class=\"string\">&#x27;&quot;:&quot;&#x27;</span>, <span class=\"string\">&#x27;https:&#x27;</span>)  </span><br><span class=\"line\">        <span class=\"comment\"># title = re.findall(&#x27;&lt;title data-react-helmet=&quot;true&quot;&gt;(.*?)&lt;/title&gt;&#x27;, VideoPage.text)[0]  </span></span><br><span class=\"line\">        title = re.findall(<span class=\"string\">&#x27;&lt;title data-react-helmet=&quot;true&quot;&gt;(.*?)&lt;/title&gt;&#x27;</span>, VideoPage.text, re.S)[<span class=\"number\">0</span>].replace(<span class=\"string\">&#x27;&quot;\\n&quot;&#x27;</span>, <span class=\"string\">&quot;&quot;</span>)  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;正在下载：&quot;</span>, title)  </span><br><span class=\"line\">        <span class=\"comment\"># 创建文件夹  </span></span><br><span class=\"line\">        f = <span class=\"built_in\">open</span>(pre_savename + <span class=\"string\">&quot;%s.mp4&quot;</span> % title, mode=<span class=\"string\">&quot;wb&quot;</span>)  <span class=\"comment\"># wb表示写入的内容为非文本文件,VideoName为视频标题  </span></span><br><span class=\"line\">        f.write(requests.get(video_url, headers=headers).content)  <span class=\"comment\"># 向外取出图片数据，不是文本信息  </span></span><br><span class=\"line\">        DiZhi = name + pre_savename  </span><br><span class=\"line\">        <span class=\"built_in\">print</span>(DiZhi)  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:  </span><br><span class=\"line\">    run = <span class=\"number\">1</span>  </span><br><span class=\"line\">    <span class=\"keyword\">while</span> run == <span class=\"number\">1</span>:  </span><br><span class=\"line\">        url = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入视频链接：&quot;</span>)  </span><br><span class=\"line\">        <span class=\"comment\"># url = &#x27;5.15 yGi:/ 喜欢你 很喜欢你 特别喜欢你.@ta  https://v.douyin.com/Ff1a79j/ 复制此链接，打开Dou音搜索，直接观看视频！ &#x27;        html = UrlGet(url)  </span></span><br><span class=\"line\">        UrlHandle(url)  </span><br><span class=\"line\">        <span class=\"built_in\">print</span>(html)</span><br></pre></td></tr></table></figure>\n<p>注意：本地需要有 Python 环境！</p>\n",
            "tags": [
                "Python",
                "Python"
            ]
        },
        {
            "id": "https://www.naraci.top/post/14702.html",
            "url": "https://www.naraci.top/post/14702.html",
            "title": "Python基础",
            "date_published": "2022-10-14T15:35:01.000Z",
            "content_html": "<h1 id=\"变量\"><a class=\"markdownIt-Anchor\" href=\"#变量\">#</a> 变量</h1>\n<p>直接赋值例如：<br>\na = 1<br>\nb = 2<br>\n 注意：字符串赋值需加引号 “” 如  <code>c = &quot;刘强&quot;</code></p>\n<h1 id=\"数据类型\"><a class=\"markdownIt-Anchor\" href=\"#数据类型\">#</a> 数据类型</h1>\n<p>整数类型：int<br>\n 字符串类型：str<br>\n 浮点数：float<br>\n 等等…</p>\n<h1 id=\"数组\"><a class=\"markdownIt-Anchor\" href=\"#数组\">#</a> 数组</h1>\n<p>注意取单个字符需要从 0 开始计数例如<br>\n ''a,b,c,d&quot;–&gt;0,1,2,3<br>\n 若 <code>[:5]</code> –&gt; 则是从 1 开始计数</p>\n<h1 id=\"字典\"><a class=\"markdownIt-Anchor\" href=\"#字典\">#</a> 字典</h1>\n<p name:=\"\" 张三,sex:男,age:=\"\" 20=\"\">var =</p>\n<p>函数<br>\n常用的 Python 内助的函数<br>\n input ( ) 用于接收用户输入的数据<br>\n print ( ) 用于打印数据</p>\n<h1 id=\"判断语句\"><a class=\"markdownIt-Anchor\" href=\"#判断语句\">#</a> 判断语句</h1>\n<p>假若<br>\n a = 3<br>\nb = 2<br>\n 如果 a 和 b 相等则会执行上面的语句反之执行下一行的<br>\n if 判断条件：<br>\n执行语句……<br>\nelse：<br>\n执行语句……<br>\n 注意：缩进需注意</p>\n<h1 id=\"循环语句\"><a class=\"markdownIt-Anchor\" href=\"#循环语句\">#</a> 循环语句</h1>\n<p>while 语句 给定它一个值的范围等于，不等于或者大小于它都会一直运行直至超出或者小于给定值停止运行。<br>\n<img data-src=\"https://www.runoob.com/wp-content/uploads/2014/05/006faQNTgw1f5wnm06h3ug30ci08cake.gif\" alt=\"图片摘自与菜鸟教程\"></p>\n<p>for 语句<br>\n Python for 循环可以遍历任何序列的项目，如一个列表或者一个字符串<br>\n可以循环字符串</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = <span class=\"string\">&#x27;china&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> s:</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(i)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>结果挨个换行打印出 china</p>\n</blockquote>\n<p>for i in range(5)<br>\n 含义是遍历 0-5 前一个结束会从 0 开始计数至数字 4 结束</p>\n<p>若想从一计数那么需要加上参数<br>\n for i in range (1,5)<br>\n 含有则是从 1 开始到 5 前一个数字结束<br>\n会输出 1-4</p>\n<p>for 语句里面还能包含三个值例如：<br>\nfor i in range(1, 10, 3)<br>\n for i in range (起始值， 结束值， 步长)<br>\n 1 开始步长为 3<br>\n1+3=4<br>\n4+3=7<br>\n7+3=10    // 但是只能 1-9 所以 10 不能输出<br>\n则会打印 1 4 7<br>\n** 应用场景：** 会爬取一个列表返回给我们<br>\n循环一个列表<br>\n例如：<br>\na_list = [‘周杰伦’，‘林俊杰’, ‘成龙’]<br>\nfor i in a_list:<br>\nprint(i)<br>\n break 语句<br>\n break 语句用在 while 和 for 循环中。<br>\n作用：停止执行后面的循环语句</p>\n<p>continue 语句<br>\n Python continue 语句跳出本次循环，而 break 跳出整个循环。<br>\ncontinue 语句用来告诉 Python 跳过当前循环的剩余语句，然后继续进行下一轮循环。<br>\ncontinue 语句用在 while 和 for 循环中。</p>\n<p>pass 语句<br>\n作用：是空函数，不做任何事情，用于暂时还未写逻辑和函数的里面</p>\n<p>Python 日期和时间<br>\n用函数方法<br>\n time.time ( ) 来获取当前时间戳<br>\n格式化时间<br>\n <code>print(time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.localtime()))</code></p>\n",
            "tags": [
                "python",
                "python"
            ]
        },
        {
            "id": "https://www.naraci.top/post/90e3f00.html",
            "url": "https://www.naraci.top/post/90e3f00.html",
            "title": "Python爬取微博热搜至excel",
            "date_published": "2022-10-14T15:35:01.000Z",
            "content_html": "<h2 id=\"注意\"><a class=\"markdownIt-Anchor\" href=\"#注意\">#</a> 注意</h2>\n<p>爬取热搜需要 cookie 和文件路径不然报错无法运行</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># author:Naraci</span></span><br><span class=\"line\"><span class=\"comment\"># time:2022/5/6   10:53</span></span><br><span class=\"line\"><span class=\"comment\"># WX:Naraci</span></span><br><span class=\"line\"><span class=\"comment\"># file:微博热搜.py</span></span><br><span class=\"line\"><span class=\"comment\"># IDE:PyCharm</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> parse</span><br><span class=\"line\"><span class=\"keyword\">import</span> xlwt</span><br><span class=\"line\"></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;user-agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36&#x27;</span></span><br><span class=\"line\">                  <span class=\"string\">&#x27; (KHTML, like Gecko) Chrome/101.0.4951.41 Mobile Safari/537.36 Edg/101.0.1210.32&#x27;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&#x27;cookie&#x27;</span>: <span class=\"string\">&#x27;填入cookie&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Get_html</span>(<span class=\"params\">url</span>):  <span class=\"comment\"># 获取页面</span></span><br><span class=\"line\">    response = requests.get(url, headers=headers)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> response.status_code == <span class=\"number\">200</span>:</span><br><span class=\"line\">        parse_html(response.text)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(response.status_code)</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">parse_html</span>(<span class=\"params\">content</span>):  <span class=\"comment\"># 解析页面</span></span><br><span class=\"line\">    soup = BeautifulSoup(content, <span class=\"string\">&#x27;lxml&#x27;</span>)</span><br><span class=\"line\">    tds = soup.find_all(<span class=\"string\">&#x27;a&#x27;</span>)</span><br><span class=\"line\">    datalist = []  <span class=\"comment\"># 创建一个列表</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> a <span class=\"keyword\">in</span> tds:</span><br><span class=\"line\">        data = []</span><br><span class=\"line\">        title = a.get_text()</span><br><span class=\"line\">        URL = a[<span class=\"string\">&#x27;href&#x27;</span>]</span><br><span class=\"line\">        URL_whole = parse.urljoin(<span class=\"string\">&#x27;https://s.weibo.com/&#x27;</span>, URL)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(title)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(URL_whole)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;写入完成！！！！！&quot;</span>)</span><br><span class=\"line\">        data.append(title)  <span class=\"comment\"># 写入标题</span></span><br><span class=\"line\">        data.append(URL_whole)  <span class=\"comment\"># 写入链接</span></span><br><span class=\"line\">        datalist.append(data)</span><br><span class=\"line\">    book = xlwt.Workbook(encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>, style_compression=<span class=\"number\">0</span>)  <span class=\"comment\"># 生成excel文件</span></span><br><span class=\"line\">    sheet = book.add_sheet(<span class=\"string\">&#x27;微博热搜榜&#x27;</span>, cell_overwrite_ok=<span class=\"literal\">True</span>)  <span class=\"comment\"># 生成一个表单</span></span><br><span class=\"line\">    cols = [<span class=\"string\">&#x27;标题&#x27;</span>, <span class=\"string\">&#x27;链接&#x27;</span>]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(cols)):</span><br><span class=\"line\">        sheet.write(<span class=\"number\">0</span>, col, cols[col])</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(datalist)):</span><br><span class=\"line\">            data = datalist[i]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(data)):</span><br><span class=\"line\">                sheet.write(i + <span class=\"number\">1</span>, j, data[j])</span><br><span class=\"line\">                book.save(<span class=\"string\">&quot;C:/路径/微博热搜榜.xls&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    url = <span class=\"string\">&#x27;https://s.weibo.com/top/summary&#x27;</span></span><br><span class=\"line\">    Get_html(url)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img data-src=\"http://image.naraci.top/2022/05/10/7fb22be402cb7.png\" alt=\" \"></p>\n",
            "tags": [
                "Python",
                "Python"
            ]
        },
        {
            "id": "https://www.naraci.top/post/5753e137.html",
            "url": "https://www.naraci.top/post/5753e137.html",
            "title": "Cloudreve windows版安装成功后提示请求出现错误",
            "date_published": "2022-10-06T15:35:01.000Z",
            "content_html": "<h3 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h3>\n<p>今天根据官网安装手册搭建 Cloudreve 网盘程序后 IP 访问正常但是反代域名便出现主页提示 “请求时出现问题 xxx”<br>\n<img data-src=\"https://forum.cloudreve.org/assets/files/2021-07-06/1625561821-684171-187f6530-f458-43ae-9d1d-ecb9048d22d1.png\" alt=\"问题图片例子\"></p>\n<h3 id=\"解决方法仅支持apache\"><a class=\"markdownIt-Anchor\" href=\"#解决方法仅支持apache\">#</a> 解决方法（仅支持 Apache）</h3>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">#PROXY-START/</span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">IfModule</span> <span class=\"attr\">mod_proxy.c</span>&gt;</span></span></span><br><span class=\"line\">ProxyRequests Off</span><br><span class=\"line\">SSLProxyEngine on</span><br><span class=\"line\">AllowEncodedSlashes NoDecode</span><br><span class=\"line\">ProxyPass / http://127.0.0.1:5212/ nocanon</span><br><span class=\"line\">ProxyPassReverse / http://127.0.0.1:5212/</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">IfModule</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"section\">#PROXY-END/</span></span><br></pre></td></tr></table></figure>\n<p>在反代理修改配置文件添加下面代码即可！</p>\n<p>注意：IP 地址记得也需修改为自己的 IP</p>\n",
            "tags": [
                "Course",
                "Course"
            ]
        },
        {
            "id": "https://www.naraci.top/post/21290.html",
            "url": "https://www.naraci.top/post/21290.html",
            "title": "数据库基础操作",
            "date_published": "2022-09-28T15:35:01.000Z",
            "content_html": "<h1 id=\"创建新数据库\"><a class=\"markdownIt-Anchor\" href=\"#创建新数据库\">#</a> 创建新数据库</h1>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE DATABASE &#x27;数据库名&#x27; CHARACTER SET （字符集）`utf8mb4` COLLATE （排序规则）`utf8mb4_bin`;</span><br></pre></td></tr></table></figure>\n<h1 id=\"mysql创建新表\"><a class=\"markdownIt-Anchor\" href=\"#mysql创建新表\">#</a> Mysql 创建新表</h1>\n<p><strong>创建数据表</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE `数据库名称`.`数据表名称`(</span><br><span class=\"line\">`名` varchar(255) NOT NULL(没有默认值),  </span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h1 id=\"mysql基础语法\"><a class=\"markdownIt-Anchor\" href=\"#mysql基础语法\">#</a> Mysql 基础语法</h1>\n<ul>\n<li>Insert 语句：向某一行插入一条数据。<br>\n在查询编辑器中输入以下 sql.</li>\n</ul>\n<blockquote>\n<p>INSERT INTO  <code>user</code> <br>\n( <code>mobile</code> , <code>name</code> , <code>sex</code> )<br>\nVALUES<br>\n (‘123’,‘张三’,‘1’)  // 这里不是反单引号！</p>\n</blockquote>\n<ul>\n<li>Delete 删除语句：</li>\n</ul>\n<blockquote>\n<p>DELETE FROM<br>\n <code>表名</code> <br>\n WHERE 值 =  <code>表内对应值</code></p>\n</blockquote>\n<ul>\n<li>Select 语句：</li>\n</ul>\n<blockquote>\n<p>SELECT *<br>\n <code>表名</code> <br>\n FROM  <code>表名</code>    // 查询表内全部内容</p>\n</blockquote>\n<ul>\n<li>Update 语句：</li>\n</ul>\n<blockquote>\n<p>UPDATE <code>user</code> <br>\nSET  <code>name</code>  = ’值‘<br>\nWHERE mobile = ’值‘     // 根据 mobile 来确认修改数据的值</p>\n</blockquote>\n<h1 id=\"远程连接mysql数据库的一些问题\"><a class=\"markdownIt-Anchor\" href=\"#远程连接mysql数据库的一些问题\">#</a> 远程连接 MySQL 数据库的一些问题</h1>\n<p>记录<strong>报错 2002（10060）</strong></p>\n<ol>\n<li>服务器安全组需要开放数据库的端口（默认 3306）。</li>\n<li>假如使用宝塔面板则需要在安全内放行端口。</li>\n<li>若上方内容还是不行则在服务器命令窗口输入关闭防火墙的命令。</li>\n</ol>\n",
            "tags": [
                "MYSQL",
                "MySQL"
            ]
        },
        {
            "id": "https://www.naraci.top/post/45655.html",
            "url": "https://www.naraci.top/post/45655.html",
            "title": "ccaa linux一键安装Arianna+AriaNg+FileBrowser",
            "date_published": "2022-09-27T15:35:01.000Z",
            "content_html": "<h1 id=\"ccaa\"><a class=\"markdownIt-Anchor\" href=\"#ccaa\">#</a> CCAA</h1>\n<p>原为 CentOS + Caddy + AriaNg + Aria2，故命名为 CCAA，不过现在不仅仅支持 CentOS，主流的 Debian、Ubuntu 也已经支持，自 2.0 版本已移除 Caddy，改用 Golang 写了一个简单的 webserver 来运行 AriaNg</p>\n<ul>\n<li>Aria2 提供离线下载</li>\n<li>ccaa_web 支撑 AriaNg 运行</li>\n<li>AriaNg 为 Aria2 提供 WEB 界面</li>\n<li>Filemanager 提供文件管理</li>\n</ul>\n<hr>\n<h1 id=\"主要功能\"><a class=\"markdownIt-Anchor\" href=\"#主要功能\">#</a> 主要功能</h1>\n<ul>\n<li>支持 HTTP/HTTPS/FTP/BT/ 磁力链接等离线下载，断点续传等</li>\n<li>文件管理、视频在线播放</li>\n<li>完善的帮助文档</li>\n</ul>\n<hr>\n<h1 id=\"环境要求\"><a class=\"markdownIt-Anchor\" href=\"#环境要求\">#</a> 环境要求</h1>\n<ul>\n<li>支持的操作系统：CentOS 7-8、Debian 8-10、Ubuntu 16-18</li>\n<li>操作系统要求 64 位</li>\n</ul>\n<hr>\n<h1 id=\"安装ccaa\"><a class=\"markdownIt-Anchor\" href=\"#安装ccaa\">#</a> 安装 CCAA</h1>\n<p>一键安装脚本（使用 root 用户）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash &lt;(curl -Lsk https://raw.githubusercontent.com/helloxz/ccaa/master/ccaa.sh)</span><br></pre></td></tr></table></figure>\n<p>如果出现 - bash: curl: command not found 错误，说明 curl 命令没安装，请输入下面的命令先安装 curl，再回过头来执行上面的命令再来一次。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#Debian or Ubuntu</span><br><span class=\"line\">apt-get -y install curl</span><br><span class=\"line\">#CentOS</span><br><span class=\"line\">yum -y install curl</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"常用命令\"><a class=\"markdownIt-Anchor\" href=\"#常用命令\">#</a> 常用命令</h1>\n<ul>\n<li>ccaa: 进入 CCAA 操作界面</li>\n<li>ccaa status: 查看 CCAA 运行状态</li>\n<li>ccaa stop: 停止 CCAA</li>\n<li>ccaa start: 启动 CCAA</li>\n<li>ccaa restart: 重启 CCAA</li>\n<li>ccaa -v: 查看 CCAA 版本（2.0 开始支持）</li>\n</ul>\n<hr>\n<h1 id=\"部分截图\"><a class=\"markdownIt-Anchor\" href=\"#部分截图\">#</a> 部分截图</h1>\n<p><img data-src=\"https://i.imgtg.com/2022/10/06/phiXK.png\" alt=\"截图\"><br>\n<img data-src=\"https://i.imgtg.com/2022/10/06/ph1za.png\" alt=\"截图\"></p>\n<blockquote>\n<p>文章转载于 https://gitee.com/hixz/ccaa/</p>\n</blockquote>\n",
            "tags": [
                "Bt",
                "Bt"
            ]
        },
        {
            "id": "https://www.naraci.top/post/45550.html",
            "url": "https://www.naraci.top/post/45550.html",
            "title": "Photoshop制作太极",
            "date_published": "2022-09-24T15:35:01.000Z",
            "content_html": "<h1 id=\"第一步-基础圆形的画法\"><a class=\"markdownIt-Anchor\" href=\"#第一步-基础圆形的画法\">#</a> 第一步 基础圆形的画法</h1>\n<p>创建空白画布和复制图层</p>\n<p>首先创建白色的画布（初始即可）即右下方复制一个画布，所有操作都在图层上面操作。<br>\n<img data-src=\"https://i.imgtg.com/2022/09/22/gymNN.png\" alt=\" \"><br>\n在最上面的选项栏–&gt; 视图–&gt; 打开标尺，并新建垂直和水平的参考线。<br>\n<img data-src=\"https://i.imgtg.com/2022/09/22/gmMnv.png\" alt=\"两条线居中\"><br>\n在工具栏使用椭圆选框工具在十字交叉点按住 shift+alt 拖动鼠标左键画圆后按住 alt+del 建。<br>\n<img data-src=\"https://i.imgtg.com/2022/09/22/gmyDC.png\" alt=\"效果图\"></p>\n<h1 id=\"第二步开始裁剪太极\"><a class=\"markdownIt-Anchor\" href=\"#第二步开始裁剪太极\">#</a> 第二步开始裁剪太极</h1>\n<p>用矩形选框工具选中圆形的左半边 (从选中区减去，详情见下方示图)<br>\n<img data-src=\"https://i.imgtg.com/2022/09/22/gmpxi.png\" alt=\"鼠标移至图标上面会显示\"><br>\n选中后可见圆形右边轮廓有清晰的虚线框即成功。<br>\n再取两条水平参考线放置圆形的上面和下面相切。<br>\n<img data-src=\"https://i.imgtg.com/2022/09/22/gm4Kj.png\" alt=\"参考线与圆形相切\"></p>\n<p>注意：矩形选框工具从左边白框顶部角端开始拖动并设为 (从选项区减去)</p>\n<p>再次用椭圆选项框工具，在选项栏中选择 (添加选项区) 按下鼠标左键在圆形的四分之一处拖动绘制一个正圆，在圆的上半个区域。再选项栏选中 (从选项区减去) 同上原理在下方圆的四分之一处拖动正圆至圆的下半方出。如下图。<br>\n<img data-src=\"https://i.imgtg.com/2022/09/22/gmVBG.png\" alt=\"\"><br>\n再次 ctrl+del 键取消一半黑色区域为白色。<br>\n<img data-src=\"https://i.imgtg.com/2022/09/22/gmYZ1.png\" alt=\"\"><br>\n在太极一处画一个正圆。<br>\n<img data-src=\"https://i.imgtg.com/2022/09/22/gmf0I.png\" alt=\"\"><br>\nctrl+del 填充为白色后右击选择变换选区将中心点移至大圆的圆心再右击选择垂直翻转，按回车确认后 alt+del 填充为黑色。<br>\n<img data-src=\"https://i.imgtg.com/2022/09/22/gm2H6.png\" alt=\"完成效果图\"></p>\n",
            "tags": [
                "PS"
            ]
        }
    ]
}